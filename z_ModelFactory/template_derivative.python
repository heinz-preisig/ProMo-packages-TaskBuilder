# Automatically generated, do not edit!

"""
What:    Python simulation
Author:  Tobias
Contact: arne.t.elve(at)ntnu.no
Date:    {{date}}
Model:   {{model_name}}
File:    Derivative
"""

# Import packages:
import numpy as np                                   # Numerical python library
from scipy.integrate import ode                           # Integrator in scipy
import matplotlib.pyplot as plt                             # Data illustration
from python_simulation import IndexSet, khatriRao, blockReduce   # Custom funcs


# INTEGRATING FUNCTION:
def derivative(t, state):
  """
  t: time
  state: {{ states }}

  Integrating function:
  dxdt = derivative(t, state)

  Note: sequence of variables depends on integrator. Using scipy's ode requires
  time before state, while odeint needs state before time.  Also the integrator
  want  flat vectors,  no column vectors.  I, therefore, transpose  the vectors
  manually. Normal transpose is not sufficient.
  """

  # EQUATIONS:
  {% for eq in equations -%}
  {{ eq }}
  {% endfor -%}

  return np.concatenate([{% for derivative in derivatives -%} {{ derivative }}, {% endfor -%}], axis = 1)
